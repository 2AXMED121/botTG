import asyncio
import re
import json
import aiohttp

from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent

BOT_TOKEN = "7550305230:AAEY4WlFF87qV39Z6rQvd9dj0QUqoXsygKs"
API_URL = "https://open.er-api.com/v6/latest/USD"
LIMITED_CURRENCIES = {"USD", "EUR", "GBP", "JPY", "RUB", "CAD"}
EXCHANGE_RATES = {}
DEFAULT_CURRENCY = None  # Default to None, indicating no currency is initially selected

class CurrencySettings(StatesGroup):
    waiting_for_currency = State()

currency_preferences = {}

class NumberInputFilter(Filter):
    async def __call__(self, message: types.Message) -> bool:
        if message.text and re.match(r"^\d+([.,]\d+)?$", message.text.strip()):  # Allow . or ,
            return True
        return False

class CustomInlineFilter(Filter):
    async def __call__(self, inline_query: types.InlineQuery, bot: Bot) -> bool:
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        return inline_query.query.startswith(f"@{bot_username}")

async def get_preferred_currency(user_id: int) -> str:
    return currency_preferences.get(user_id, DEFAULT_CURRENCY)

async def set_preferred_currency(user_id: int, currency_code: str):
    currency_preferences[user_id] = currency_code

async def convert_currency(amount: float, from_currency: str, to_currency: str) -> float:
    if from_currency not in EXCHANGE_RATES or to_currency not in EXCHANGE_RATES:
        raise ValueError("Неверный код валюты")

    usd_amount = amount / EXCHANGE_RATES[from_currency]
    converted_amount = usd_amount * EXCHANGE_RATES[to_currency]
    return converted_amount

async def fetch_exchange_rates():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    rates = data.get("rates")
                    if rates:
                        global EXCHANGE_RATES
                        EXCHANGE_RATES = {currency: rates[currency] for currency in LIMITED_CURRENCIES if currency in rates}
                        print("Курсы валют успешно обновлены из API.")
                    else:
                        print("Не удалось получить курсы валют из API (отсутствуют 'rates').")
                else:
                    print(f"Ошибка при получении курсов валют из API: {response.status}")
    except aiohttp.ClientError as e:
        print(f"Ошибка подключения к API: {e}")

async def start_command(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    preferred_currency = await get_preferred_currency(user_id)

    bot_info = await bot.get_me()
    bot_username = bot_info.username
    query_text = f"@{bot_username} setcurrency"  # Start inline query with "setcurrency"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Выбрать/Изменить валюту", switch_inline_query_current_chat=query_text)]
    ])

    if preferred_currency is None:
        # No currency selected yet
        await message.answer("Пожалуйста, выберите основную валюту:", reply_markup=keyboard)
    else:
        await message.answer(f"Текущая валюта: {preferred_currency}. Чтобы конвертировать, пришлите в чат сумму.\nДля изменения основной валюты нажмите кнопку ниже:", reply_markup=keyboard)

async def currency_callback_handler(query: types.CallbackQuery, bot: Bot):
    currency_code = query.data.split(":")[1]
    user_id = query.from_user.id

    if currency_code in EXCHANGE_RATES:
        await set_preferred_currency(user_id, currency_code)

        # Check if query.message is not None before passing it to start_command
        if query.message:
            await start_command(query.message, bot)
        else:
            # If query.message is None, send a new message instead
            bot_info = await bot.get_me()
            bot_username = bot_info.username
            preferred_currency = await get_preferred_currency(user_id)
            query_text = f"@{bot_username} setcurrency"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="Выбрать/Изменить валюту", switch_inline_query_current_chat=query_text)]
            ])
            await bot.send_message(user_id, f"Текущая валюта: {preferred_currency}. Чтобы конвертировать, пришлите в чат сумму.\nДля изменения основной валюты нажмите кнопку ниже:", reply_markup=keyboard)


        await query.answer(f"Валюта установлена на {currency_code}") # optional confirmation toast
    else:
        await query.answer("Произошла ошибка. Пожалуйста, попробуйте еще раз.")



async def change_currency_command(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    query_text = f"@{bot_username} setcurrency"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Изменить валюту", switch_inline_query_current_chat=query_text)]
    ])
    await message.answer("Для изменения основной валюты нажмите кнопку ниже:", reply_markup=keyboard)


async def set_currency_command(message: types.Message, state: FSMContext, bot:Bot):  # bot argument added
    
    user_id = message.from_user.id
    preferred_currency = await get_preferred_currency(user_id)

    button_text = "Выберите основную валюту"
    bot_info = await bot.get_me()
    bot_username = bot_info.username

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=currency, callback_data=f"set_currency:{currency}") for currency in EXCHANGE_RATES]
    ])

    await message.answer("Пожалуйста, выберите код желаемой валюты:", reply_markup=keyboard)
    await state.set_state(CurrencySettings.waiting_for_currency)



async def process_currency_input(message: types.Message, state: FSMContext):
    currency_code = message.text.upper()
    if currency_code in EXCHANGE_RATES:
        await set_preferred_currency(message.from_user.id, currency_code)
        await message.answer(f"Валюта установлена на {currency_code}.")
        await state.clear()
    else:
        await message.answer("Неверный код валюты. Пожалуйста, попробуйте еще раз.")



async def handle_number_input(message: types.Message, bot: Bot):
    amount_str = message.text.replace(",", ".") # Replace comma with dot
    amount = float(amount_str)
    user_id = message.from_user.id
    preferred_currency = await get_preferred_currency(user_id)

    if not preferred_currency:  # Handle case where no currency is set
        await message.answer("Сначала выберите валюту с помощью /start или /setcurrency.")
        return

    button_text = "Конвертировать валюту"
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    query_text = f"@{bot_username} {amount} {preferred_currency}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, switch_inline_query_current_chat=query_text)]
    ])
    await message.answer("Конвертировать это значение:", reply_markup=keyboard)


async def inline_query_handler(inline_query: types.InlineQuery, bot: Bot):
    user_id = inline_query.from_user.id
    preferred_currency = await get_preferred_currency(user_id)
    query = inline_query.query

    if "setcurrency" in query:  # Handle "setcurrency" inline query
        results = []
        for currency_code in EXCHANGE_RATES:
            # Instead of sending a command, use callback data to set the currency
            results.append(
                InlineQueryResultArticle(
                    id=currency_code,
                    title=currency_code,
                    description=f"Установить {currency_code} в качестве основной валюты.",
                    input_message_content=InputTextMessageContent(message_text=f"Выбрана валюта {currency_code}"), # Replace the content of the message
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="Подтвердить", callback_data=f"set_currency:{currency_code}")]]),
                )
            )
        await inline_query.answer(results, cache_time=1)
        return


    try:
        _, amount_str, base_currency = query.split()
        amount_str = amount_str.replace(",", ".") #  handle comma
        amount = float(amount_str)
        base_currency = base_currency.upper()
    except ValueError:
        print(f"Invalid inline query: {query}")
        return

    results = []
    for currency_code, rate in EXCHANGE_RATES.items():
        try:
            converted_amount = await convert_currency(amount, base_currency, currency_code)
            exchange_rate = EXCHANGE_RATES[currency_code] / EXCHANGE_RATES[base_currency]
            description = f"1 {base_currency} = {exchange_rate:.2f} {currency_code}"
            title = f"{amount:.2f} {base_currency} = {converted_amount:.2f} {currency_code}"

            conversion_data = {
                "amount": amount,
                "base_currency": base_currency,
                "converted_amount": converted_amount,
                "currency_code": currency_code
            }
            input_content = InputTextMessageContent(message_text=f"{amount:.2f} {base_currency} = {converted_amount:.2f} {currency_code}")
            results.append(
                InlineQueryResultArticle(
                    id=currency_code,
                    title=title,
                    description=description,
                    input_message_content=input_content,
                )
            )
        except ValueError as e:
            print(f"Error converting to {currency_code}: {e}")

    await inline_query.answer(results, cache_time=1)


async def chosen_inline_result_handler(chosen_result: types.ChosenInlineResult, bot: Bot):
    currency_code = chosen_result.result_id
    user_id = chosen_result.from_user.id

async def main():
    default_bot_props = DefaultBotProperties(parse_mode="HTML")
    bot = Bot(token=BOT_TOKEN, default=default_bot_props)
    await bot.delete_webhook(drop_pending_updates=True)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    dp.message.register(start_command, Command("start", ignore_case=True)) #Pass bot to start command
    dp.message.register(change_currency_command, Command("changecurrency", ignore_case=True))
    dp.message.register(set_currency_command, Command("setcurrency", ignore_case=True))
    dp.message.register(process_currency_input, CurrencySettings.waiting_for_currency)
    dp.callback_query.register(currency_callback_handler, lambda query: query.data.startswith("set_currency:"))

    dp.message.register(handle_number_input, NumberInputFilter())
    dp.inline_query.register(inline_query_handler, CustomInlineFilter())
    dp.chosen_inline_result.register(chosen_inline_result_handler)

    await fetch_exchange_rates()

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
